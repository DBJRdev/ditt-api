App\Entity\User:
    properties:
        vacations:
            subresource:
                resourceClass: 'App\Entity\Vacation'
                collection: true
        workHours:
            subresource:
                resourceClass: 'App\Entity\WorkHours'
                collection: true
        workMonths:
            subresource:
                resourceClass: 'App\Entity\WorkMonth'
                collection: true
    collectionOperations:
        supervisedUsers:
            method: 'GET'
            route_name: 'api_supervised_users'
            normalization_context:
                groups:
                    - supervised_user_out_list
                    - vacation_out_list
                    - work_hours_out_list
        get:
            method: 'GET'
            normalization_context:
                enable_max_depth: true
                groups:
                    - user_out_list
                    - vacation_out_list
                    - work_hours_out_list
        getOptions:
            method: 'GET'
            route_name: 'api_users_get_options'
            normalization_context:
                groups:
                    - user_out_options
        post:
            method: 'POST'
            validation_groups:
                - user_password_required
            normalization_context:
                groups:
                    - user_out_detail
                    - vacation_out_list
                    - work_hours_out_list
            denormalization_context:
                groups:
                    - user_in
                    - vacation_in
                    - work_hours_in
    itemOperations:
        get:
            method: 'GET'
            normalization_context:
                groups:
                    - user_out_detail
                    - vacation_out_list
                    - work_hours_out_list
        put:
            method: 'PUT'
            normalization_context:
                groups:
                    - user_out_detail
                    - vacation_out_list
                    - work_hours_out_list
            denormalization_context:
                groups:
                    - user_in
                    - vacation_in
                    - work_hours_in
        delete:
            method: 'DELETE'
        login_check:
            method: 'POST'
            route_name: 'api_login_check'
            swagger_context:
                summary: 'Authenticate user.'
                responses:
                    200:
                        description: 'User was logged in.'
                    401:
                        description: 'Bad Credentials.'
                    400:
                        description: 'Invalid request.'
                parameters:
                    - name: email
                      description: 'Email'
                      type: string
                      in: body
                      required: true
                    - name: password
                      description: 'Password'
                      type: string
                      in: body
                      required: true
        logout:
            method: 'POST'
            route_name: 'api_logout'
            swagger_context:
                summary: 'Log out user.'
                responses:
                    200:
                        description: 'User was logged out.'
                    401:
                        description: 'Bad Credentials.'
                    400:
                        description: 'Invalid request.'
                parameters: ~
        newPassword:
            method: 'PUT'
            route_name: 'api_new_password'
            swagger_context:
                summary: 'Sets new password'
                responses:
                    200:
                        description: 'New password was set.'
                    400:
                        description: 'Invalid request.'
                parameters:
                    - name: resetPasswordToken
                      description: 'Reset password token'
                      type: string
                      in: body
                      required: true
                    - name: newPlainPassword
                      description: 'New plain password'
                      type: string
                      in: body
                      required: true
        refreshToken:
            method: 'POST'
            route_name: 'api_refresh_token'
            swagger_context:
                summary: 'Refreshes token'
                responses:
                    200:
                        description: 'Token was refreshed'
                    400:
                        description: 'Invalid request.'
        resetPassword:
            method: 'PUT'
            route_name: 'api_reset_password'
            swagger_context:
                summary: 'Resets password'
                responses:
                    200:
                        description: 'Password was reset and e-mail with reset link was sent.'
                    400:
                        description: 'Invalid request.'
                parameters:
                    - name: email
                      description: 'Email'
                      type: string
                      in: body
                      required: true
